<?xml version="1.0" encoding="UTF-8"?>
<!-- DTD: XML로 작성한 내용을 해석하는 위치를 설정 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="movie">
  	<!-- 파라미터없이 전체 데이터를 읽어오는 SQL -->
  	<select id="allmovie" resultType="mybatis.domain.MovieVO">
  		select code, name, regdate
  		from movies
  	</select>
  	
  	<!-- code를 가지고 하나의 데이터를 읽어오는 SQL : 상세보기 -->
  	<select id="getmovie" parameterType="java.lang.Integer" resultType="mybatis.domain.MovieVO">
  		select code, name, regdate
  		from movies
  		where code = #{code}
  	</select>
  	
  	<!-- 데이터를 삽입하는 SQL -->
  	<!--
  	<insert id="insertmovie" parameterType="mybatis.domain.MovieVO">
  		
  		insert into movies(code, name, regdate)
  		values(#{code}, #{name}, #{regdate})
  		
  	</insert>
  	-->
  	<!-- 프로시저를 이용한 작업 -->
  	<insert id="insertmovie" parameterType="mybatis.domain.MovieVO"
  		statementType="CALLABLE">
  		{call insertmovie(#{code}, #{name}, #{regdate})}
  	</insert>
  	
  	<!-- 데이터를 수정하는 SQL 
  		기본키(code)를 가지고 데이터를 가져와서 나머지 컬럼의 값을 수정 -->
  	<update id="updatemovie" parameterType="mybatis.domain.MovieVO">
  		update movies 
  		set name = #{name}, regdate = #{regdate}
  		where code = #{code}
  	</update>
  	
  	<!-- 데이터를 삭제하는 SQL 
  	기본키를 가지고 데이터를 삭제하는 것이 일반적 -->
  	<delete id="deletemovie" parameterType="java.lang.Integer">
  		delete from movies
  		where code = #{code}
  	</delete>
  	
  	<!-- name에 포함된 데이터를 검색하는 SQL -->
  	<select id="searchmovie" parameterType="java.lang.String" resultType="mybatis.domain.MovieVO">
  		select code, name, regdate
  		from movies
  		where name like '%' || #{name} || '%'
  	</select>
 
  	
  </mapper>